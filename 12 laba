          \\ A //

#include <iostream>
#include <vector>
#include <cmath>
#include <limits>

using namespace std;


int nearestNumberOffset(const vector<int>& numbers, int k) {
    int nearestOffset = 0;
    int minDistance = numeric_limits<int>::max();

    for (int i = 0; i < numbers.size(); ++i) {
        int distance = abs(numbers[i] - k);

        if (distance < minDistance || (distance == minDistance && i < nearestOffset)) {
            minDistance = distance;
            nearestOffset = i;
        }
    }

    return nearestOffset;
}

int main() {
    int n;
    cin >> n;

    vector<int> numbers(n);

    for (int i = 0; i < n; ++i) {
        cin >> numbers[i];
    }

    int k;
    cin >> k;

  
    cout << nearestNumberOffset(numbers, k) << endl;

    return 0;
}



        \\ B //

#include <iostream>

using namespace std;

int main() {
    int m, n;
    cin >> m >> n;


    int arr[m][n];
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> arr[i][j];
        }
    }

 
    int limit;
    cin >> limit;

    bool penalty = false;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (arr[i][j] > limit) {
                penalty = true;
                break;
            }
        }
        if (penalty) {
            break;
        }
    }


    if (penalty) {
        cout << "Penalty!" << endl;
    } else {
        cout << "No penalty for today." << endl;
    }

    return 0;
}



        \\ C //

#include <iostream>
#include <vector>

using namespace std;

string isPowerful(const vector<int>& arr) {
    int xorResult = 0;

    for (int num : arr) {
        xorResult ^= num;
    }

    if ((xorResult & (xorResult - 1)) == 0) {
        return "YES";
    } else {
        return "NO";
    }
}

int main() {
    int n;
    cin >> n;

    vector<int> arr(n);

    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }


    cout << isPowerful(arr) << endl;

    return 0;
}



      \\ D //

#include <iostream>
#include <string>
#include <map>
#include <iterator>
#include <algorithm>
#include <vector>
#include <set>
using namespace std;
int Gcd(int a, int b){
    int maxgcd = 1;
    for(int i = 2; i <= min(a,b); i++){
        if(a % i == 0 && b % i == 0){
            if(i > maxgcd) maxgcd = i;
        }
    }
    return maxgcd;
}
int main(){
    int n;
    cin >> n;
    int a[n];
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    int MaxGcd = 1;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(i != j) {
                int gcdofel = Gcd(a[i], a[j]);
                if(gcdofel > MaxGcd) MaxGcd = gcdofel;
            }
        }
    }
    cout << MaxGcd;
    return 0;
}



        \\ E //

#include <iostream>
#include <vector>

using namespace std;


void decToHex(int n) {
    vector<char> hexDigits; 

    while (n > 0) {
        int remainder = n % 16;
        char hexDigit;

        if (remainder < 10) {
            hexDigit = '0' + remainder;
        } else {
            hexDigit = 'A' + (remainder - 10);
        }

        hexDigits.push_back(hexDigit);
        n /= 16;
    }

 
    for (auto it = hexDigits.rbegin(); it != hexDigits.rend(); ++it) {
        cout << *it;
    }

    cout << endl;
}

int main() {
    int n;
    cin >> n;

    decToHex(n);

    return 0;
}



        \\ F //

#include <iostream>
#include <string>

using namespace std;


void isTasty(const string& s) {
    int sum = 0;


    for (char ch : s) {
        sum += static_cast<int>(ch);
    }


    if (sum > 300) {
        cout << "It is tasty!" << endl;
    } else {
        cout << "Oh, no!" << endl;
    }
}

int main() {
    string dishName;

  
    cin >> dishName;


    isTasty(dishName);

    return 0;
}



         \\ G //

#include <iostream>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <string>
#include <bits/stdc++.h>
using namespace std;

int main() {
   int n;
   cin >> n;
   vector<int> a(n);

   for(int i = 0; i < n; i++){
    cin >> a[i];
   }

    auto it = max_element(a.begin(), a.end());

    int sum = accumulate(a.begin(), a.end(), 0);

    cout << sum << " " << *it << endl;

    return 0;
}



          \\ H //

#include <iostream>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <string>
#include <bits/stdc++.h>
using namespace std;

int main() {
   string s;
   cin >> s;

   reverse(s.begin(), s.end());

   cout << s;

    return 0;
}



         \\ I //

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    string s;
    cin >> s;

    int sum = 0;
    for (char ch : s) {
        if (isdigit(ch)) {
            sum += (ch - '0');
        }
    }

    cout << sum << endl;

    return 0;
}



          \\ J //

#include <iostream>
#include <unordered_set>
#include <cmath>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n, m;
    cin >> n;

    vector<int> firstArray(n);
    unordered_set<int> set;

    for (int i = 0; i < n; ++i) {
        cin >> firstArray[i];
    }

    cin >> m;

    vector<int> secondArray(m);
    for (int i = 0; i < m; ++i) {
        cin >> secondArray[i];
    }

  
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            set.insert(firstArray[i] + firstArray[j]);
        }
    }

    for (int i = 0; i < m; ++i) {
        if (set.find(secondArray[i]) != set.end()) {
            cout << "YES" << endl;
        } else {
            cout << "NO" << endl;
        }
    }

    return 0;
}
