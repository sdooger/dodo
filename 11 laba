       \\ A //


#include <bits/stdc++.h>
using namespace std;
int main(){
 string week[8] = {"SUN", "MON", "TUE", "WED", "THU", "FRI",  "SAT", "SUN"};
 string* tp=week, t; int c=0; cin>>t;
 for(int i=0; i<8; i++){
  if(*tp==t){
   c=i;
   break;
  }
  tp++;
 }
 cout<<7-c;
}


      \\ B //


#include <bits/stdc++.h>
using namespace std;
int main(){
 int n;
 cin>>n;
 vector<int>d(n); for(int i=0; i<n; i++)cin>>d[i];
 set<int>s(d.begin(), d.end());
 if(s.size()==d.size())cout<<"YES";
 else cout<<"NO";
}

 
      \\ C //


#include <bits/stdc++.h>

using namespace std;
#define pb push_back
int main(){
    int n;
    map<string, double>d;
    cin>>n;
    string s;
    double total=0, tp;
    for(int i=0; i<n; i++){
        cin>>s>>tp;
        d[s]+=tp;
        total+=tp;
    }
    vector<pair<double, string>>res;
    for(auto it:d){
        res.pb({it.second/total*100.0, it.first});
    }
    sort(res.begin(), res.end());
    for(int i=res.size()-1; i>=0; i--){
        cout<<res[i].second<<" "<<res[i].first<<"%\n";
    }
}


      \\ D //


#include <iostream>
int main() {
    int n, m;
    std::cin >> n >> m;
    int a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            std::cin >> a[i][j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (a[i][j] == 0 && a[i][j + 1] == 0 && a[i + 1][j] == 0 && a[i + 1][j + 1] == 0 && i <= n - 2 && j <= n - 2) {
                std::cout << "NO\n";
                goto fin;
            }
            else if (a[i][j] == 1 && a[i][j + 1] == 1 && a[i + 1][j] == 1 && a[i + 1][j + 1] == 1 && i <= n - 2 && j <= n - 2) {
                std::cout << "NO\n";
                goto fin;
            }
        }
    }
    std::cout << "YES\n";
    fin:
    return 0;
}


      \\ E //


#include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    string s;
    cin>>n;
    map<char, int>mp;
    for(int i=0; i<n; i++){
        cin>>s;
        set<char>st(s.begin(), s.end());
        for(auto i:st) mp[i]++;
    }
    bool res=true;
    for(auto i:mp){
        if(i.second==n){
            cout<<i.first<<" ";
            res=false;
        }
    }
    if(res) cout<< "NO COMMON CHARACTERS";
    return 0;
}


      \\ F //


#include <bits/stdc++.h>
using namespace std;
int sup(int a, int b){
 while(a*b!=0){
  if(a>b)a%=b;
  else b%=a;
 }
 return a+b;
}

int main(){
 // freopen("ladder.in", "r", stdin);
 // freopen("ladder.out", "w", stdout);
 int a, b, k;
 cin>>a>>b>>k;
 int c = sup(a, b);
 vector<int>divisors;
 for(int i=c; i>=1; i--){
  if(c%i==0)divisors.push_back(i);
 }
 cout<<divisors[k-1];

}


      \\ G //


#include <bits/stdc++.h>
using namespace std;
#define pb push_back
int main(){
 // freopen("ladder.in", "r", stdin);
 // freopen("ladder.out", "w", stdout);
 int n, tp; string s;
 cin>>n;
 map<string, set<int>>st;
 while(n--){
  cin>>s>>tp;
  st[s].insert(tp);
 }
 for(auto value:st){
  if(value.second.size()>=3) cout<<value.first<<" +1\n";
  else cout<<value.first<<" NO BONUS\n";
 }
}


      \\ H //


#include <bits/stdc++.h>
using namespace std;
#define pb push_back
int main(){
 // freopen("ladder.in", "r", stdin);
 // freopen("ladder.out", "w", stdout);
 int n; string s;
 cin>>n>>s; n%=27;
 for(int i=0; i<s.size(); i++){
  if(int(s[i])+n>90){
   s[i] = char(64+((n+int(s[i]))-90));
  }
  else s[i] = char(int(s[i])+n);
 }
 cout<<s;
}


      \\ I //


#include <bits/stdc++.h>
using namespace std;
int main(){
    string s;
    cin>>s;
    map<char, int>mp;
    for(int i=0; i<s.size(); i++){
        mp[s[i]] = (mp[s[i]]+1)%2;
    }
    int res=0;
    for(auto it:mp){
        if(it.second%2)res++;
    }
    if(res<=1) cout<< "ZA WARUDO TOKI WO TOMARE";
    else cout<< "JOJO";
    
    return 0;
}


      \\ J //


#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

struct Point {
    int x, y;
    double distance;

    Point(int x, int y, int px, int py) : x(x), y(y) {
        distance = sqrt(pow(x - px, 2) + pow(y - py, 2));
    }

    // Overload the < operator to sort points based on distance
    bool operator<(const Point& other) const {
        return distance < other.distance;
    }
};

int main() {
    // Input point P
    int px, py;
    std::cin >> px >> py;

    // Input number of points
    int n;
    std::cin >> n;

    std::vector<Point> points;

    // Input n points and calculate distances
    for (int i = 0; i < n; ++i) {
        int x, y;
        std::cin >> x >> y;
        points.emplace_back(x, y, px, py);
    }

    // Sort points based on distance
    std::sort(points.begin(), points.end());

    // Output the sorted points
    for (const auto& point : points) {
        std::cout << point.x << " " << point.y << std::endl;
    }

    return 0;
}
